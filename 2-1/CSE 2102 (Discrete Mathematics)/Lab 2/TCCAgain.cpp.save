#include<bits/stdc++.h>
using namespace std;

int Map[100];
char str[200];
char oper[10]={'C','D','I','E','N'};
int map2[200],pdx,val[200];
int t,i,j,k,l,idx;
#define SIZE 50
int top=-1;       /* Global declarations */

push(char elem)
{
    char s[SIZE];                       /* Function for PUSH operation */
    s[++top]=elem;
}

char pop()
{
    char s[SIZE];                      /* Function for POP operation */
    return(s[top--]);
}

int pr(char elem)
{                 /* Function for precedence */
    switch(elem)
    {
    case 'E': return 1;
    case 'I': return 2;
    case 'D': return 3;
    case 'C': return 4;
    case 'N': return 5;
    }
    return 0;
}

int valueof(int a,int b,int op){
    switch(op){
        case 1:return (a&b);
        case 2:return (a|b);
        case 3:return ((!a)|b);
        case 4:return ((!a)&(!b))|(a&b);
        case 5:return !a;
    }
}
int eval(){
    if(str[pdx]>='a' && str[pdx]<='z'){
        int x=val[map2[str[pdx]]];
        pdx++;
        return x;
    }
    else{
        int op=Map[str[pdx]];
        if(op==5){
            pdx++;
            int x=eval();
            return valueof(x,x,op);
        }
        else{
            pdx++;
            int x=eval();
            int y=eval();
            return valueof(x,y,op);
        }
    }
}

char* InfixToPrefix(char* infx)
{
    char infx[50],prfx[50],ch,elem;
    int i=0,k=0;
    push('#');
    strrev(infx);
    while( (ch=infx[i++]) != '\0')
    {
        if( ch == ')') push(ch);
        else
            if(isalnum(ch)) prfx[k++]=ch;
            else
                if( ch == '(')
                {
                    while( s[top] != ')')
                        prfx[k++]=pop();
                    elem=pop(); /* Remove ) */
                }
                else
                {       /* Operator */
                    while( pr(s[top]) >= pr(ch) )
                        prfx[k++]=pop();
                    push(ch);
                }
    }
    while( s[top] != '#')     /* Pop from stack till empty */
        prfx[k++]=pop();
    prfx[k]='\0';          /* Make prfx as valid string */
    strrev(prfx);
    return strrev(infx);
}

int main(){
    char [10],str[10];
    for(i=0;i<=4;i++) Map[oper[i]]=i+1;
    cin>>Istr;
    //str = infixToPostfix(Istr);
    scanf("%s",infx);

    cout<<InfixToPrefix(Istr)<<endl;;


    l=str.size();
    idx=0;
    for(i=97;i<=122;i++)
        map2[i]=-1;
    for(i=0;i<l;i++)
        if(Map[str[i]]==0 && map2[str[i]]==-1){
            map2[str[i]]=idx++;
    }
    for(i=0;i<(1<<idx);i++){
        for(j=0;j<idx;j++){
            if(i&(1<<j))
                val[j]=1;
            else
                val[j]=0;
        }
        pdx=0;
        if(!eval())
            break;
    }
    if(i!=(1<<idx))
        printf("NO\n");
    else
        printf("YES\n");
    return 0;
}
