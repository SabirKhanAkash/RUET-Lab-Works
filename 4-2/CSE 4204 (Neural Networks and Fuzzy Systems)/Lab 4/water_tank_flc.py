# -*- coding: utf-8 -*-
"""Water Tank FLC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dxEwg2gqLRPEJqiaDfHb0DsLXK_4U2hq
"""

import numpy as np

level = float(input("Enter the level sense (0-10): "))
temp = float(input("Enter the temp sense (0-130): "))
low_out_knob = float(input("Enter the lower limit of output knob: "))
high_out_knob = float(input("Enter the upper limit of output knob: "))

print("\n------------------------------------------------------\n")

print("Crisp Input Level Value: ",level)
print("Crisp Input Temp Value: ",temp)

print("\n------------------------------------------------------\n")


print("\n---------------RULE BASE-----------------")
print("L\T    XS      S       M       L       XL")
print("-----------------------------------------")
print("XS  |  AG     ALL     VL       -       -")
print("S   |   AL     AG      VL      VL      -")
print("M  |  AW     AL      AG      VL      -")
print("L   |  AW     AL      AL      ALL     -")
print("XL |  AW      AL      AL      AG      -")

print("\nHere, \nVL = VERYLITTLE\nALL = ALITTLE\nAG = AGOODAMOUNT\nAL = ALOT\nAW = AWHOLELOT")

print("\n-------------------------------------------------------------------------------------\n")

level_dict = {}
temp_dict = {}
knob_motor_dict = {}

def calc(x,x1,y1,x2,y2):
    return round(y1+(((x-x1)*(y2-y1))/(x2-x1)),2)


def rule_base(lvl,tmp):
    if(lvl == "XS_level" and tmp == "XS_temp"):
        return "AGOODAMOUNT"
    if(lvl == "XS_level" and tmp == "S_temp"):
        return "ALITTLE"
    if(lvl == "XS_level" and tmp == "M_temp"):
        return "VERYLITTLE"
    if(lvl == "XS_level" and tmp == "L_temp"):
        return "NULL"
    if(lvl == "XS_level" and tmp == "XL_temp"):
        return "NULL"

    if(lvl == "S_level" and tmp == "XS_temp"):
        return "ALOT"
    if(lvl == "S_level" and tmp == "S_temp"):
        return "AGOODAMOUNT"
    if(lvl == "S_level" and tmp == "M_temp"):
        return "VERYLITTLE"
    if(lvl == "S_level" and tmp == "L_temp"):
        return "VERYLITTLE"
    if(lvl == "S_level" and tmp == "XL_temp"):
        return "NULL"

    if(lvl == "M_level" and tmp == "XS_temp"):
        return "AGOODAMOUNT"
    if(lvl == "M_level" and tmp == "S_temp"):
        return "ALOT"
    if(lvl == "M_level" and tmp == "M_temp"):
        return "AGOODAMOUNT"
    if(lvl == "M_level" and tmp == "L_temp"):
        return "VERYLITTLE"
    if(lvl == "M_level" and tmp == "XL_temp"):
        return "NULL"

    if(lvl == "L_level" and tmp == "XS_temp"):
        return "AGOODAMOUNT"
    if(lvl == "L_level" and tmp == "S_temp"):
        return "AWHOLELOT"
    if(lvl == "L_level" and tmp == "M_temp"):
        return "ALOT"
    if(lvl == "L_level" and tmp == "L_temp"):
        return "ALITTLE"
    if(lvl == "L_level" and tmp == "XL_temp"):
        return "NULL"

    if(lvl == "XL_level" and tmp == "XS_temp"):
        return "AWHOLELOT"
    if(lvl == "XL_level" and tmp == "S_temp"):
        return "AWHOLELOT"
    if(lvl == "XL_level" and tmp == "M_temp"):
        return "ALOT"
    if(lvl == "XL_level" and tmp == "L_temp"):
        return "AGOODAMOUNT"
    if(lvl == "XL_level" and tmp == "XL_temp"):
        return "NULL"


def MF_level(x):
    if(x>=0.0 and x<1.0):
        level_dict[calc(x,0.0,0.0,1.0,1.0)] = "XS_level"
    if(x>=1.0 and x<=2.0):
        level_dict[calc(x,1.0,1.0,2.0,0.0)] = "XS_level"

    if(x>=1.5 and x<2.25):
        level_dict[calc(x,1.5,0.0,2.25,1.0)] = "S_level"
    if(x>=2.25 and x<=4.0):
        level_dict[calc(x,2.25,1.0,4.0,0.0)] = "S_level"

    if(x>=3.0 and x<5.0):
        level_dict[calc(x,3.0,0.0,5.0,1.0)] = "M_level"
    if(x>=5.0 and x<=7.0):
        level_dict[calc(x,5.0,1.0,7.0,0.0)] = "M_level"

    if(x>=6.0 and x<7.25):
        level_dict[calc(x,6.0,0.0,7.25,1.0)] = "L_level"
    if(x>=7.25 and x<=8.5):
        level_dict[calc(x,7.25,1.0,8.5,0.0)] = "L_level"

    if(x>=7.5 and x<8.75):
        level_dict[calc(x,7.5,0.0,8.75,1.0)] = "XL_level"
    if(x>=8.75 and x<=10.0):
        level_dict[calc(x,8.75,1.0,10.0,0.0)] = "XL_level"


def MF_temp(x):
    if(x>=0.0 and x<10.0):
        temp_dict[calc(x,0.0,0.0,10.0,1.0)] = "XS_temp"
    if(x>=10.0 and x<=20.0):
        temp_dict[calc(x,10.0,1.0,20.0,0.0)] = "XS_temp"

    if(x>=10.0 and x<22.5):
        temp_dict[calc(x,10.0,0.0,22.5,1.0)] = "S_temp"
    if(x>=22.5 and x<=35.0):
        temp_dict[calc(x,22.5,1.0,35.0,0.0)] = "S_temp"

    if(x>=30.0 and x<52.5):
        temp_dict[calc(x,30.0,0.0,52.5,1.0)] = "M_temp"
    if(x>=52.5 and x<=75.0):
        temp_dict[calc(x,52.5,1.0,75.0,0.0)] = "M_temp"

    if(x>=60.0 and x<77.5):
        temp_dict[calc(x,60.0,0.0,77.5,1.0)] = "L_temp"
    if(x>=77.5 and x<=95.0):
        temp_dict[calc(x,77.5,1.0,95.0,0.0)] = "L_temp"

    if(x>=85.0 and x<105.0):
        temp_dict[calc(x,85.0,0.0,105.0,1.0)] = "XL_temp"
    if(x>=105.0 and x<=125.0):
        temp_dict[calc(x,105.0,1.0,125.0,0.0)] = "XL_temp"

MF_level(level)
MF_temp(temp)

out = ""
nonCrisp = []
max = -99999999

for key1,values1 in level_dict.items():
    for key2,values2 in temp_dict.items():
        print(values1,": ",key1," AND ",values2,": ",key2," -----> min: ",min(key1,key2)," (",rule_base(values1,values2),")")
        if(min(key1,key2) > max):
            lvl = values1
            tmp = values2
            max = min(key1,key2)
        nonCrisp.append(min(key1,key2))

print("\n-------------------------------------------------------------------------------------\n")

print("Fuzzified Output: ",rule_base(lvl,tmp))
nonCrisp.sort(reverse=True)
print("Crisp Output Value: ",round(nonCrisp[0]*(high_out_knob - low_out_knob),2))