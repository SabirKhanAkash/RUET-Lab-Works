# -*- coding: utf-8 -*-
"""Kohonen's SONN_Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10kB60d03mvC4NHLTM3Z6HhF7ucmuClw3
"""

import numpy as np, numpy.random
from scipy.spatial import distance
inf = 99999999

n = int(input("Enter number of input node: "))
d = n
c = int(input("Enter number of output cluster: "))
alpha = float(input("Enter the learning rate: "))

X = np.random.randint(0,2,(n,d))

addZeros = np.zeros((n, 1))

print("\nThe input pattern: \n", X)
print("\nTotal number of input node: ",n)
print("Total number of features per input node: ",d)
print("Total number of output clusters: ",c)

X = np.append(X, addZeros, axis=1)

weight = np.random.rand(n,c)
print("\nThe initial weight: \n", np.round(weight,2))
iter = int(input("\nEnter the number of iterations: "))

for it in range(iter): 
    for i in range(n):
        distMin = inf
        for j in range(c):
            dist = np.square(distance.euclidean(weight[:,j], X[i,0:d]))
            if distMin>dist:
                distMin = dist
                jMin = j
        weight[:, jMin] = weight[:, jMin] + alpha * (X[i,0:d] - weight[:, jMin])  
    alpha = 0.5*alpha
    
print("\nThe final weight: \n",np.round(weight,3))

for i in range(n):    
    cNumber = np.where(weight[i] == np.amax(weight[i]))
    X[i,d] = cNumber[0]
    
print("\nThe input node with classified cluster number: \n", X)