# -*- coding: utf-8 -*-
"""Single Layer Perceptron Learning Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1as-rrXCusyBMNaynKSBCzilTo96VWQ7T

# **SINGLE LAYER PERCEPTRON ALGORITHM**
"""

import random

w = []
output = []
n = int(input("Enter the number of inputs: "))

for i in range(n):
    w.append(random.uniform(0,2))

# for i in range(n):
#     wVal = float(input("Enter the weight: "))
#     w.append(wVal)
#     i = i + 1

theta = float(input("Enter the Threshold (Î¸): "))

count = 0
i = 0
c = 0;

print("\n<---------------------- Training Phase ---------------------->\n")
while(True):
    if(i == 2**n):
        break

    if(i >= (2**n)/2):
        target_out = 1
    else:
        target_out = 0
    
    y = 0
    x = []

    for j in range(len(w)):
        check = (bool) ((1 << j) & i)
        if(check == False):
            x.append(0)
        else:
            x.append(1)
    x.reverse()

    for j in range(len(w)):
        y = y + w[j] * x[j] 
        j = j + 1
    
    if(y < theta):
        Fout = 0
    else:
        Fout = 1

    if(i == 0):
        print()
        print("-------------------------- Cycle ",c,"-----------------------------")
        c += 1;
        print("Input --------------- Current Output ---------  Target Output")
        print("-----------------------------------------------------------------")

    print(x," -------------- ",Fout," ------------------- ",target_out)

    if(Fout == 0 and target_out == 1):
        for j in range(len(w)):
            w[j] = w[j] + x[j]
        i = -1
    
    if(Fout == 1 and target_out == 0):
        for j in range(len(w)):
            w[j] = w[j] - x[j]
        i = -1

    output.append(Fout)
    count = count + 1

    i = i + 1

print()
print()

print("New Adapted Weights (w): ")
for i in range(n):
    print("w[",i,"] = ","{:.2f}".format(w[i]))

print()

print("<---------------------- Testing Phase ---------------------->\n")

test = []
testOut = 0
tmp = 0

print("Enter a test input")
for i in range(len(w)):
    test.append(int(input()))

for indx in range(len(w)):
        tmp = tmp + w[indx] * test[indx] 
    
if(tmp < theta):
    testOut = 0
else:
    testOut = 1

print("\nTest Output: ",testOut)