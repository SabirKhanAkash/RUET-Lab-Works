# -*- coding: utf-8 -*-
"""Single Layer Perceptron Learning Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1as-rrXCusyBMNaynKSBCzilTo96VWQ7T
"""

w = []
output = []
n = int(input("Enter the number of inputs: "))

for i in range(n):
    wVal = float(input("Enter the weight: "))
    w.append(wVal)
    i = i + 1

theta = float(input("Enter the Threshold (θ): "))
# bias = float(input("Enter the Bias (η): "))

count = 0
i = 0

while(True):
    if(i == 2**n):
        break

    if(i >= (2**n)/2):
        actual_out = 1
    else:
        actual_out = 0
    
    y = 0
    x = []

    for j in range(len(w)):
        check = (bool)( (1 << j) & i)
        if(check == False):
            x.append(0)
        else:
            x.append(1)

    for j in range(len(w)):
        y = y + w[j] * x[j] 
        j = j + 1
    
    if(y < theta):
        Fout = 0
    else:
        Fout = 1

    if(Fout == 0 and actual_out == 1):
        for j in range(len(w)):
            w[j] = w[j] + x[j]
            # w[j] = w[j] + bias * x[j]
        i = -1
    
    if(Fout == 1 and actual_out == 0):
        for j in range(len(w)):
            w[j] = w[j] - x[j]
            # w[j] = w[j] + bias * x[j]
        i = -1

    output.append(Fout)
    count = count + 1

    i = i + 1

print()
print()

print("New Adapted Weights (w): ")
for i in range(n):
    print("w[",i,"] = ","{:.2f}".format(w[i]))

print()

print("After Single Layer Perceptron Learning outputs with newly adapted weights are (y): ")

m = 0
for i in range(count-2**n, count, 1):
    print("y[",m,"] = ",output[i])
    m = m + 1

# Test Inputs
# 4
# 0.4
# 0.5
# 0.6
# 0.5
# 0.2


