# -*- coding: utf-8 -*-
"""Genetic Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TgS2QgHz8A5YiGrnGZA3lNLFj4ummykg
"""

import random
import numpy as np, numpy.random
from random import choice
import math

inp = int(input("Enter number of input string: "))
feature = int(input("Enter number of feature per input string: "))
gen = int(input("How many generations: "))

population = np.random.randint(0,2,(inp,feature))
c = 0

while(c<gen):
    xVal = []
    xSquare = []

    xValCross = []
    xCrossSquare = []

    xValMut = []
    xMutSquare = []

    sum__ = []

    p_select = []
    exp_count = []
    actual_count = []

    def toDecimal(l):
        sum = 0
        j = feature - 1
        for i in range(feature):
            sum = sum + l[i] * (2 ** j)
            j = j - 1
        return sum

    print("\n\n<------------------------------------ Generation ",c," ------------------------------------>")
    print("\n|------------------------------------ Selection Section ------------------------------------|")
    print("\nPopulation: ")
    print(population)

    for i in range(inp):
        xVal.append(toDecimal(population[i]))
        if(toDecimal(population[i])*toDecimal(population[i]) > m1):
            m1 = toDecimal(population[i])*toDecimal(population[i])
        xSquare.append(toDecimal(population[i]*toDecimal(population[i])))

    print("\nx : ",xVal)

    print("\nf(x) = x² : ",xSquare)
    sum__.append(sum(xSquare))

    for i in range(inp):
        tmp = round(toDecimal(population[i])*toDecimal(population[i])/sum(xSquare),2)
        if(tmp > m2):
            m2 = tmp
        p_select.append(tmp)

    sum__.append(sum(p_select))

    for i in range(inp):
        tmp = round(toDecimal(population[i])*toDecimal(population[i])/round(sum(xSquare)/inp,2),2)
        if (tmp > m3):
            m3 = tmp
        exp_count.append(tmp)
        if tmp>=0.5:
            tmp = math.ceil(tmp)
        else:
            tmp = math.floor(tmp)
        if (tmp > m4):
            m4 = tmp
        actual_count.append(tmp)

    sum__.append(sum(exp_count))

    sum__.append(sum(actual_count))

    print("\nPselect, f(x)/∑f : ",p_select)

    print("\nExpected Count, f(x)/avg(f) :",exp_count)

    print("\nActual Count :",actual_count)

    print("\nSUM :",sum__[0])

    min_ac = 999999
    max_ac = -999999
    min_indx = 0
    min_indx_list = []
    max_indx = 0

    for i in range(inp):
        if(actual_count[i] < min_ac):
            min_ac = actual_count[i]
            min_indx = i

        if(actual_count[i] > max_ac):
            max_ac = actual_count[i]
            max_indx = i

    for i in range(inp):
        if(min_ac == actual_count[i]):
            min_indx_list.append(i)

    print("\n|------------------------------------ Crossover Section ------------------------------------|")
    print("\nEliminating weak strings by replacing ",min_indx_list," strings with ",max_indx," string, we get the updated population")

    for i in range(len(min_indx_list)):
        population[min_indx_list[i],:] = population[max_indx,:]

    print("\n",population)

    def crossOver(a,b):
        x = random.randrange(1,feature)
        tmpA = []
        tmpB = []

        for i in range(x):
            tmpA.append(a[i])

        for j in range(x,feature):
            tmpA.append(b[j])

        for i in range(x):
            tmpB.append(b[i])

        for k in range(x,feature):
            tmpB.append(a[k])

        return tmpA, tmpB, x

    print()

    xx = 0
    for i in range(i,inp-1,2):
        population[i], population[i+1], xx = (crossOver(population[i],population[i+1]))

    print("\nHere Randomly Taken Crosspoint: ",xx)
    print("\nAfter Crossover Updated Population: ")
    print("\n",population)

    min_mut = 999999
    min_indx_mut = 0
    min_indx_mut_list = []

    for i in range(inp):
        xValCross.append(toDecimal(population[i]))
        xCrossSquare.append(toDecimal(population[i]*toDecimal(population[i])))

    print("\nx : ",xValCross)

    print("\nf(x) = x² : ",xCrossSquare)
    print("\nSUM: ",sum(xCrossSquare))

    print("\n|------------------------------------ Mutation Section ------------------------------------|")

    for i in range(inp):
        if(xValCross[i] < min_mut):
            min_mut = xValCross[i]
            min_indx_mut = i

    for i in range(inp):
        if(min_mut == xValCross[i]):
            min_indx_mut_list.append(i)

    for i in range(len(min_indx_mut_list)):
        j = random.randrange(1,feature)
        population[min_indx_mut_list[i]][j] = 1

        j = random.randrange(1,feature)
        population[min_indx_mut_list[i]][j] = 0

    print("\nAfter Mutation Updated Population: ")
    print("\n",population)

    for i in range(inp):
        xValMut.append(toDecimal(population[i]))
        xMutSquare.append(toDecimal(population[i]*toDecimal(population[i])))

    print("\nx : ",xValMut)

    print("\nf(x) = x² : ",xMutSquare)
    print("\nSUM: ",sum(xMutSquare))
    c = c + 1