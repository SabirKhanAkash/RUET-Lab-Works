# -*- coding: utf-8 -*-
"""DIP_Lab_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Nu1H8eUTlGVaUQkzd9h8z-TYZd8aiks
"""

#Calculating Bit-rate

def bitrate(width,height,bit):
    return (bit*8)/(height*width)

#Calculating Entropy

def entropy(im):
    p = np.array([(im==v).sum() for v in range(256)])
    p = p/p.sum()
    
    e = -(p[p>0]*np.log2(p[p>0])).sum()
    return e

# For Original Image

import cv2
import os
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from skimage.io import imread,imshow,imsave
from PIL import Image 
import PIL 

OriginalImg = cv2.imread('/content/drive/MyDrive/DIP Lab/Lab 2/data.png',cv2.IMREAD_GRAYSCALE)

[row,col] = OriginalImg.shape

bit = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/data.png').st_size

cv2_imshow(OriginalImg)

print()
print("The Entropy of Original image is: ",entropy(OriginalImg))
print("The bit rate of Original image is: ",bitrate(row,col,bit)," bits/pixel")

#For A (Left) Prediction

ResultantImg1 = np.zeros([row,col])

for i in range(row):
  for j in range(col):
    if(i == 1):
      if(j == 1):
        predict = 0;
      else:
        predict = OriginalImg[i,j-1];
    else:
      predict = OriginalImg[i-1,j];
    ResultantImg1[i,j] = OriginalImg[i,j] - predict;

[row1,col1] = ResultantImg1.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase1.png', ResultantImg1)
bit1 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase1.png').st_size

cv2_imshow(ResultantImg1)

print("For A Prediction -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg1))
print("The bit rate of Resultant image is: ",bitrate(row1,col1,bit1)," bits/pixel")

#For B (Upper) Prediction

ResultantImg2 = np.zeros([row,col])

for i in range(row):
  for j in range(col):
    if(j == 1):
      if(i == 1):
        predict = 0;
      else:
        predict = OriginalImg[i-1,j];
    else:
      predict = OriginalImg[i,j-1];
    ResultantImg2[i,j] = OriginalImg[i,j] - predict;

[row2,col2] = ResultantImg2.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase2.png', ResultantImg2)
bit2 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase2.png').st_size

cv2_imshow(ResultantImg2)

print("For B Prediction -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg2))
print("The bit rate of Resultant image is: ",bitrate(row2,col2,bit2)," bits/pixel")

#For C (Upper Left) Prediction

ResultantImg3 = np.zeros([row,col])

for i in range(1, row):
  for j in range(1, col):
    if(i == 1 or j == 1):
      if(i != 1):
        predict = OriginalImg[i-1,j];
      elif(j != 1):
        predict = OriginalImg[i,j-1]
      else: 
        predict = 0;
    else:
      predict = (OriginalImg [i-1,j-1])
    ResultantImg3[i,j] = OriginalImg[i,j] - predict;

[row3,col3] = ResultantImg3.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase3.png', ResultantImg3)
bit3 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase3.png').st_size

cv2_imshow(ResultantImg1)

print("For C Prediction -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg3))
print("The bit rate of Resultant image is: ",bitrate(row3,col3,bit3)," bits/pixel")

#For A+B-C Prediction

ResultantImg4 = np.zeros([row,col])

for i in range(row):
  for j in range(col):
    if(i == 1 or j == 1):
      if(i != 1):
        predict = OriginalImg[i-1,j];
      elif(j != 1):
        predict = OriginalImg[i,j-1]
      else: 
        predict = 0;
    else:
      predict = (OriginalImg[i,j-1]+ OriginalImg[i-1,j] - OriginalImg[i-1,j-1])
    ResultantImg4[i,j] = OriginalImg[i,j] - predict;

[row4,col4] = ResultantImg4.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase4.png', ResultantImg4)
bit4 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase4.png').st_size

cv2_imshow(ResultantImg4)

print("For A+B-C Prediction -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg4))
print("The bit rate of Resultant image is: ",bitrate(row4,col4,bit4)," bits/pixel")

#For A + (B – C)/2 Prediction

ResultantImg5 = np.zeros([row,col])

for i in range(1,row):
  for j in range(1,col):
    if(i == 1 or j == 1):
      if(i != 1):
        predict = OriginalImg[i-1,j];
      elif(j != 1):
        predict = OriginalImg[i,j-1]
      else: 
        predict = 0;
    else:
      predict = (OriginalImg[i,j-1]+ (OriginalImg[i-1,j] - OriginalImg[i-1,j-1])/2)
    ResultantImg5[i,j] = OriginalImg[i,j] - predict;

[row5,col5] = ResultantImg5.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase5.png', ResultantImg5)
bit5 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase5.png').st_size

cv2_imshow(ResultantImg5)

print("For A + (B – C) / 2 Prediction -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg5))
print("The bit rate of Resultant image is: ",bitrate(row5,col5,bit5)," bits/pixel")

#For B + (A – C)/2 Prediction

ResultantImg6 = np.zeros([row,col])

for i in range(1,row):
  for j in range(1,col):
    if(i == 1 or j == 1):
      if(i != 1):
        predict = OriginalImg[i-1,j];
      elif(j != 1):
        predict = OriginalImg[i,j-1]
      else: 
        predict = 0;
    else:
      predict = (OriginalImg[i,j-1]+ (OriginalImg[i-1,j] - OriginalImg[i-1,j-1])/2)
    ResultantImg6[i,j] = OriginalImg[i,j] - predict;

[row6,col6] = ResultantImg6.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase6.png', ResultantImg6)
bit6 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase6.png').st_size

cv2_imshow(ResultantImg6)

print("For B + (A – C) / 2 Prediction -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg6))
print("The bit rate of Resultant image is: ",bitrate(row6,col6,bit6)," bits/pixel")

# For A+B/2 Prediction

ResultantImg7 = np.zeros([row,col])

for i in range(1, row):
  for j in range(1, col):
    if(i == 1 or j == 1):
      if(i != 1):
        predict = OriginalImg[i-1,j];
      elif(j != 1):
        predict = OriginalImg[i,j-1]
      else: 
        predict = 0;
    else:
      predict = (OriginalImg[i-1,j]+ OriginalImg[i,j-1])/2
    ResultantImg7[i,j] = OriginalImg[i,j] - predict;

[row7,col7] = ResultantImg7.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase7.png', ResultantImg7)
bit7 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofCase7.png').st_size

cv2_imshow(ResultantImg7)

print("For A+B / 2 -------------->")
print("The Entropy of Resultant image: ",entropy(ResultantImg7))
print("The bit rate of Resultant image is: ",bitrate(row7,col7,bit7)," bits/pixel")

# For LOCO-I

LocoI = np.zeros([row,col])

for i in range(row):
  for j in range(col):
    A = OriginalImg[i-1,j]
    B = OriginalImg[i,j-1]
    C = OriginalImg[i-1,j-1]
    if(C >= max(A,B)):
      LocoI[i,j] = min(A, B)
    elif(C <= min(A,B)):
      LocoI[i,j] = max(A,B)
    else:
      LocoI[i,j] = A + B - C

[rowl,coll] = LocoI.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofLOCO-I.png', LocoI)
bitl = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofLOCO-I.png').st_size

cv2_imshow(LocoI)

print("For LOCO-I -------------->")
print("The Entropy of Resultant image: ",entropy(LocoI))
print("The bit rate of Resultant image is: ",bitrate(rowl,coll,bitl)," bits/pixel")

# For Temporal 

[row , col] = OriginalImg.shape
rowT = row + 1
colT = col + 1
const = 5
padded_img = np.full((rowT, colT), const, dtype=np.uint8)

xx = (rowT - row) // 2
yy = (colT - col) // 2

padded_img[yy:yy+col, xx:xx+row] = OriginalImg

cv2_imshow(padded_img)

tempo1 = np.zeros([rowT, colT])
tempo2 = np.zeros([rowT, colT])
tempo3 = np.zeros([rowT, colT])
tempo4 = np.zeros([rowT, colT])
tempo5 = np.zeros([rowT, colT])
tempo6 = np.zeros([rowT, colT])
tempo7 = np.zeros([rowT, colT])
tempo8 = np.zeros([rowT, colT])

for i in range(2, rowT):
  for j in range(2, colT):
    A = padded_img[i-1,j]
    B = padded_img[i,j-1]
    C = padded_img [i-1,j-1]
    tempo1[i, j] = A
    tempo2[i, j] = C
    tempo3[i, j] = B
    tempo4[i, j] = (A+B)/2
    tempo5[i, j] = A + B - C 
    tempo6[i, j] = A+((B-C)/2)
    tempo7[i, j] = B+(A-C)/2


[rowt1,colt1] = tempo1.shape

cv2.imwrite ('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofTemporal1.png', tempo1)
bitt1 = os.stat('/content/drive/MyDrive/DIP Lab/Lab 2/ResultofTemporal1.png').st_size

cv2_imshow(LocoI)

print("For Temporal 1 (A) -------------->")
print("The Entropy of Resultant image: ",entropy(tempo1))
print("The bit rate of Resultant image is: ",bitrate(rowt1,bitt1)," bits/pixel")

